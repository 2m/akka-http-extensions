@import Main._
@sect{akka-http-extensions}
  @a(
    href:="https://github.com/denigma/akka-http-extensions",
    position.absolute,
    top:=0,right:=0,border:=0,
    img(
      src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
      alt:="Fork me on GitHub"
    )
  )
  @p
    This project contains useful directives and utils for akka-http 2.x projects.
    In particular:
    @ul
      @li
        registration (with bcrypted passwords)
      @li
        cookie-based authentication
      @li
        authorization
      @li
        P-JAX
      @li
        some predefined UI controls (in controls subproject)

  @sect{Getting started}
    @p
        Just add the library to your sbt dependencies:
    @hl.scala
        resolvers += sbt.Resolver.bintrayRepo("denigma", "denigma-releases"),
        libraryDependencies += "org.denigma" %%% "akka-http-extensions" % "0.0.12"
    @p
        Then you can simply extend AuthDirectives in your routes.

  @sect{Features}
    @p
      The project was initiated because we had several akka-http projects and wanted to share the most common features and patterns.
    @p
      At the moment there are:
    @sect{Login/registration custom directives}
      @p
        Login/registration is common for all apps.
        Here we provide some directives to make them easier as well encryption support (bcrypt is used to create password hashes).
      @p
        Here how it looks like:
      @hl.scala
       class Registration(
                           usernameLogin:(String,String)=>Future[LoginResult],
                           emailLogin:(String,String)=>Future[LoginResult],
                           register:(String,String,String)=>Future[RegistrationResult],
                           userByToken:String=>Option[LoginInfo],
                           makeToken:LoginInfo=>Future[String]
                           ) extends AuthDirectives
       with Directives
       with WithLoginRejections
       with WithRegistrationRejections
       {
         def routes: Route =
           pathPrefix("users") {
             pathPrefix("login") {
               put {
                 handleRejections(loginRejectionHandlers) {
                   login(usernameLogin, emailLogin) { user =>
                     startSession(user, makeToken) {
                       complete(s"The user ${user.username} was logged in")
                     }
                   }
                 }
               }
             } ~
               pathPrefix("register") {
                 put {
                   handleRejections(registerRejectionHandlers) {
                     registration(register) { user =>
                       startSession(user, makeToken) {
                         complete(s"The user ${user.username} has been registered")
                       }
                     }
                   }
                 }
               } ~
               pathPrefix("logout") {
                 logout{ c =>
                   c.complete(s"The user was logged out")
                 }
               } ~
               pathPrefix("status"){
                 this.authenticate(userByToken){user=>
                   complete(user.username)
                 }
               }
           }
       }
    @sect{Pjax support}
      @p
        PJax is a technique that makes it easier to load html pages without page reload.
        The idea is that P-JAX header is added to all your ajax requests.
        So backend looks at the headers and renders the whole html page if there is no P-JAX header
        or only a specific template if it is an AJAX request.
      @p
        In Preview backend you can see P-JAX implementation for Twirl. Here is an example of test Router with PJax directive:
      @hl.scala
        def test = pathPrefix("test"~Slash) { ctx=>
            //here is an example with Twirl template. It the request is ajax one, then we return only template
            //if it is ordinary URL request - we render whole html page and put the template inside
            pjax[Twirl](Html(s"Some test code<h1>${ctx.unmatchedPath}</h1>"),loadPage){h=>c=>
              val resp = HttpResponse(  entity = HttpEntity(MediaTypes.`text/html`, h.body  ))
              c.complete(resp)
            }(ctx)
          }
    @sect{Authenticate directive}
        @p
          akka-http-extensions provide cookie-based authentication where tokens are stored in a cookie.
        @hl.scala
          pathPrefix("me"){
                //here userByToken is just a function that you
                //provide to extract LoginInfo by token value taken from the cookie
                this.authenticate(userByToken){user=>
                  complete(user.username)
                }
            }
    @sect{Permissions}
      @p
        Permissions directives that allow to restrict access to some users.
      @p
        @i{allow} directive is used to allow access only to a group of users in some realm.

      @hl.scala
           pathPrefix("add") {
                pathPrefix("drug") {
                  put
                  {
                    parameter("name"){ name =>
                      authenticate(sessionController.userByToken _){ user=>
                        allow(user, AdminRealm, checkRights _)
                        {
                          drugs = drugs + name
                          complete(s"drug $name added!")
                        }
                      }
                    }
                  }
                }
              }
    @sect{Utils and stubs}
      @p
        Some inmemory controllers for testing logging and registration
      @p
        BiMap - bidirectional map, it is missing in scala collections =(

  @sect{Running examples}
    @p
      This git repository contains some useful classes and directives for akka-http.
      akka.http.extensions are located in extensions subprojects. All other code is for previews.

    @p
      The project contains 4 subprojects::
      @ul
        @li
          extensions - the library itself, it is the artifact that is published
        @li
          preview/backend - scala backend example + tests
        @li
          preview/controls -  some shared between backend and frontend of the preview example
        @li
          preview/frontend - ScalaJS frontend for the example

    @p
      To run the project you must have SBT ( http://www.scala-sbt.org/ ) installed.

    @p
      To run project:
      @hl.sh
          sbt //to opens sbt console
          re-start //Use this command **instead of** run to run the app
          Open localhost:2222 to see the result, it should reload whenever any sources are change

